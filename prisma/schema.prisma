// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model Appearance {
  id         String           @id @default(cuid())
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt
  date       DateTime
  length     AppearanceLength @default(MEDIUM)
  recording  String?
  slug       String           @unique @default(cuid())
  reactions  Reaction[]
  views      View[]
  event      Event            @relation(fields: [eventId], references: [id], onDelete: Cascade)
  eventId    String
  talk       Talk?            @relation(fields: [talkId], references: [id])
  talkId     String?
  workshop   Workshop?        @relation(fields: [workshopId], references: [id])
  workshopId String?
}

model Event {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  startDate   DateTime
  endDate     DateTime
  name        String
  slug        String       @unique @default(cuid())
  type        EventType    @default(CONFERENCE)
  url         String
  appearances Appearance[]
  location    Location     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  locationId  String

  @@unique([name, startDate, endDate])
}

model Location {
  id        String       @id @default(cuid())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  name      String
  address   String
  city      String
  state     String?
  country   String
  zip       String
  type      LocationType @default(EVENT_HALL)
  events    Event[]

  @@unique([name, address, city, zip, country])
}

model Post {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  slug      String     @unique
  reactions Reaction[]
  views     View[]
}

model Reaction {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  appearance   Appearance? @relation(fields: [appearanceId], references: [id])
  appearanceId String?
  post         Post?       @relation(fields: [postId], references: [id])
  postId       String?
}

model Talk {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  abstract    String
  slides      String?
  slug        String       @unique @default(cuid())
  status      Status       @default(ACTIVE)
  tags        String[]
  appearances Appearance[]
}

model View {
  id           String      @id @default(cuid())
  createdAt    DateTime    @default(now())
  appearance   Appearance? @relation(fields: [appearanceId], references: [id])
  appearanceId String?
  post         Post?       @relation(fields: [postId], references: [id])
  postId       String?
}

model Workshop {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  title       String
  summary     String
  description String
  curriculum  String?
  repository  String?
  slides      String?
  slug        String       @unique @default(cuid())
  status      Status       @default(ACTIVE)
  tags        String[]
  appearances Appearance[]
}

enum AppearanceLength {
  SHORT
  MEDIUM
  LONG
}

enum EventType {
  CLASS
  CONFERENCE
  MEETUP
}

enum LocationType {
  CAFE
  COWORKING_SPACE
  COMPANY_OFFICE
  EVENT_HALL
  THEATER
  UNIVERSITY
}

enum Status {
  ACTIVE
  INACTIVE
}
