{
  "cover": {
    "photo": "./cover.jpg",
    "type": "Cover",
    "_raw": {}
  },
  "description": "With Code Splitting we are able to reduce kilobytes sent over the wire and potentially improve page speed. Code Splitting is a such an easy-to-use feature that every single page app should consider to add (if haven‚Äôt yet).",
  "publishedAt": "2017-10-21T00:00:00.000Z",
  "title": "How to disable Code Splitting in webpack",
  "body": {
    "raw": "\nWith Code Splitting we are able to reduce kilobytes sent over the wire and potentially improve page speed. Code Splitting is a such an easy-to-use feature that every single page app should consider to add (if haven‚Äôt yet).\n\n## So why disable Code Splitting?\n\nWell, of course we shouldn‚Äôt!\n\nIf you are building server-side rendered apps in React with [Code Splitting](https://webpack.js.org/guides/code-splitting/) support baked in, some might use zero-configuration tools like [Razzle](https://github.com/jaredpalmer/razzle), which runs two webpack instances, one for the client and the other for the server, and it builds everything for the client and for the server for you.\n\n## Let‚Äôs build an app with Code Splitting\n\nAfter defining some major split points in your app, you want to build and see how the chunks are doing so far:\n\n![Webpack build](./build.png 'Webpack build')\n\nAnd in the file explorer:\n\n![File explorer](./file-explorer.png 'File explorer')\n\nBut wait?\n\n![Server files](./server-files.png 'Server files')\n\n## What is happening here?\n\nBecause our app is splitting bundles both on the client and server, multiple bundles are created for the server too, which we don‚Äôt really want/need. So we end up having multiple split up _\\[number\\]_._server.js._ What we want is:\n\nüìù One single server.js.\n\n## Let‚Äôs fix¬†it\n\nOne way would be to create another build step to delete all \\[number\\].server.js, but that would be the last (or not an) option.\n\nA better way would be to tweak the webpack config to _disable Code Splitting for the server_. Doing some research I came across [this gist](https://gist.github.com/jcenturion/892c718abce234243a156255f8f52468) by [@jcenturion86](https://twitter.com/jcenturion86) and learned about [LimitChunkCountPlugin](https://webpack.js.org/plugins/limit-chunk-count-plugin) that allows me to set a limit ofhow many chunks should be created*.* So the config looks like this:\n\n```js\nmodule.exports = {\n  plugins: [\n    new webpack.optimize.LimitChunkCountPlugin({\n      maxChunks: 1,\n    }),\n  ],\n};\n```\n\nWith this, one single chunk/bundle will be created and voila: Code Splitting is disabled.\n\nSo in Razzle, we want to set it only for the server by doing this in the razzle.config.js:\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: require.resolve('babel-loader'),\n        include: ['src'],\n        options: {\n          presets: [\n            'dynamic-import-node',\n            'remove-webpack',\n          ],\n        }\n      ],\n    },\n  },\n};\n```\n\nSome people encountered type or runtime errors with this approach. So alternatively, we could add these two babel plugins: [babel-plugin-dynamic-import-node](https://github.com/airbnb/babel-plugin-dynamic-import-node) to transpile _import()_ to a deferred _require()_ and then remove webpack features with [babel-plugin-remove-webpack](https://github.com/knpwrs/babel-plugin-remove-webpack):\n\nBoth solutions solve the same issue:\n\n![Server file](./server-file.png 'Server file')\n\n‚úÖ One single server.js\n",
    "html": "<p>With Code Splitting we are able to reduce kilobytes sent over the wire and potentially improve page speed. Code Splitting is a such an easy-to-use feature that every single page app should consider to add (if haven‚Äôt yet).</p>\n<h2>So why disable Code Splitting?</h2>\n<p>Well, of course we shouldn‚Äôt!</p>\n<p>If you are building server-side rendered apps in React with <a href=\"https://webpack.js.org/guides/code-splitting/\">Code Splitting</a> support baked in, some might use zero-configuration tools like <a href=\"https://github.com/jaredpalmer/razzle\">Razzle</a>, which runs two webpack instances, one for the client and the other for the server, and it builds everything for the client and for the server for you.</p>\n<h2>Let‚Äôs build an app with Code Splitting</h2>\n<p>After defining some major split points in your app, you want to build and see how the chunks are doing so far:</p>\n<p><img src=\"./build.png\" alt=\"Webpack build\" title=\"Webpack build\"></p>\n<p>And in the file explorer:</p>\n<p><img src=\"./file-explorer.png\" alt=\"File explorer\" title=\"File explorer\"></p>\n<p>But wait?</p>\n<p><img src=\"./server-files.png\" alt=\"Server files\" title=\"Server files\"></p>\n<h2>What is happening here?</h2>\n<p>Because our app is splitting bundles both on the client and server, multiple bundles are created for the server too, which we don‚Äôt really want/need. So we end up having multiple split up <em>[number]</em>.<em>server.js.</em> What we want is:</p>\n<p>üìù One single server.js.</p>\n<h2>Let‚Äôs fix¬†it</h2>\n<p>One way would be to create another build step to delete all [number].server.js, but that would be the last (or not an) option.</p>\n<p>A better way would be to tweak the webpack config to <em>disable Code Splitting for the server</em>. Doing some research I came across <a href=\"https://gist.github.com/jcenturion/892c718abce234243a156255f8f52468\">this gist</a> by <a href=\"https://twitter.com/jcenturion86\">@jcenturion86</a> and learned about <a href=\"https://webpack.js.org/plugins/limit-chunk-count-plugin\">LimitChunkCountPlugin</a> that allows me to set a limit ofhow many chunks should be created*.* So the config looks like this:</p>\n<pre><code class=\"language-js\">module.exports = {\n  plugins: [\n    new webpack.optimize.LimitChunkCountPlugin({\n      maxChunks: 1,\n    }),\n  ],\n};\n</code></pre>\n<p>With this, one single chunk/bundle will be created and voila: Code Splitting is disabled.</p>\n<p>So in Razzle, we want to set it only for the server by doing this in the razzle.config.js:</p>\n<pre><code class=\"language-js\">module.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        loader: require.resolve('babel-loader'),\n        include: ['src'],\n        options: {\n          presets: [\n            'dynamic-import-node',\n            'remove-webpack',\n          ],\n        }\n      ],\n    },\n  },\n};\n</code></pre>\n<p>Some people encountered type or runtime errors with this approach. So alternatively, we could add these two babel plugins: <a href=\"https://github.com/airbnb/babel-plugin-dynamic-import-node\">babel-plugin-dynamic-import-node</a> to transpile <em>import()</em> to a deferred <em>require()</em> and then remove webpack features with <a href=\"https://github.com/knpwrs/babel-plugin-remove-webpack\">babel-plugin-remove-webpack</a>:</p>\n<p>Both solutions solve the same issue:</p>\n<p><img src=\"./server-file.png\" alt=\"Server file\" title=\"Server file\"></p>\n<p>‚úÖ One single server.js</p>"
  },
  "_id": "posts/how-to-disable-code-splitting-in-webpack/index.mdx",
  "_raw": {
    "sourceFilePath": "posts/how-to-disable-code-splitting-in-webpack/index.mdx",
    "sourceFileName": "index.mdx",
    "sourceFileDir": "posts/how-to-disable-code-splitting-in-webpack",
    "contentType": "mdx",
    "flattenedPath": "posts/how-to-disable-code-splitting-in-webpack"
  },
  "type": "Post",
  "slug": "how-to-disable-code-splitting-in-webpack"
}